{"version":3,"sources":["components/peliculaCard.js","components/FormBuscador.js","App.js","serviceWorker.js","index.js"],"names":["PeliculaCard","pelicula","className","src","poster_path","alt","title","release_date","vote_average","overview","FormBuscador","useState","query","setQuery","peliculas","setPeliculas","buscarPeliculas","e","a","preventDefault","url","fetch","res","json","data","results","console","log","onSubmit","htmlFor","type","name","placeholder","value","onChange","target","filter","map","key","id","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"0OAEe,SAASA,EAAT,GAAkC,IAAXC,EAAU,EAAVA,SAGlC,OACK,yBAAKC,UAAU,QACZ,yBAAKA,UAAU,cACVC,IAAG,0DAAqDF,EAASG,aAAeC,IAAKJ,EAASK,MAAQ,aAC3G,yBAAKJ,UAAU,iBACX,wBAAIA,UAAU,eAAeD,EAASK,OACtC,2BAAG,oDAA0BL,EAASM,eACtC,2BAAG,0CAAgBN,EAASO,eAC5B,uBAAGN,UAAU,cAAcD,EAASQ,YCXrC,SAASC,IAAc,MAGTC,mBAAS,IAHA,mBAG5BC,EAH4B,KAGrBC,EAHqB,OAMAF,mBAAS,IANT,mBAM3BG,EAN2B,KAMhBC,EANgB,KAS5BC,EAAe,uCAAG,WAAOC,GAAP,mBAAAC,EAAA,6DACpBD,EAAEE,iBAGY,mCAERC,EANc,4DAIN,mCAJM,iCAM2ER,EAN3E,iEASES,MAAMD,GATR,cASVE,EATU,gBAUGA,EAAIC,OAVP,OAUVC,EAVU,OAWhBT,EAAaS,EAAKC,SAXF,kDAchBC,QAAQC,IAAR,MAdgB,0DAAH,sDAmBrB,OACI,oCACI,0BAAMzB,UAAU,OAAO0B,SAAUZ,GAC7B,2BAAOa,QAAQ,QAAQ3B,UAAU,SAAjC,mBACA,2BAAO4B,KAAK,OAAOC,KAAK,QAAQ7B,UAAU,QAAQ8B,YAAY,iBAC9DC,MAAOrB,EAAOsB,SAAU,SAACjB,GAAD,OAAMJ,EAASI,EAAEkB,OAAOF,UAChD,4BAAQ/B,UAAU,SAAS4B,KAAK,UAAhC,WAEJ,yBAAK5B,UAAU,aACVY,EAAUsB,QAAO,SAAAnC,GAAQ,OAAIA,EAASG,eAAaiC,KAAI,SAAApC,GAAQ,OAC5D,kBAACD,EAAD,CAAcC,SAAUA,EAAUqC,IAAKrC,EAASsC,U,MCzBrDC,MAXf,WACE,OACE,kBAAC,WAAD,KACE,yBAAKtC,UAAU,aACb,wBAAIA,UAAU,SAAd,wBACA,kBAAC,EAAD,SCGYuC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLhC,QAAQgC,MAAMA,EAAMC,a","file":"static/js/main.291815cb.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport default function PeliculaCard({pelicula}){\r\n    \r\n\r\n    return(\r\n         <div className=\"card\">\r\n            <img className=\"card--image\"\r\n                 src={`https://image.tmdb.org/t/p/w185_and_h278_bestv2/${pelicula.poster_path}`} alt={pelicula.title + ' poster '}/>\r\n            <div className=\"card--content\">\r\n                <h3 className=\"card--title\">{pelicula.title}</h3>\r\n                <p><small>FECHA DE ESTRENO: {pelicula.release_date}</small></p>\r\n                <p><small>RATING: {pelicula.vote_average}</small></p>\r\n                <p className=\"card--desc\">{pelicula.overview}</p>\r\n            </div>   \r\n         </div>\r\n            \r\n    )\r\n}","import React, {useState} from 'react';\r\nimport PeliculaCard from './peliculaCard'\r\nexport default function FormBuscador(){\r\n    \r\n    //states - input de la query \r\n    const[query, setQuery] = useState('');\r\n    \r\n    //state , peliculas a renderizar\r\n    const [peliculas, setPeliculas] = useState([]);\r\n\r\n\r\n    const buscarPeliculas = async (e) => {\r\n        e.preventDefault();\r\n\r\n        \r\n        const token = '674a6ef5377de277c8d3a10076bca897';\r\n        \r\n        const url = `https://api.themoviedb.org/3/search/movie?api_key=${token}&language=es-ES&query=${query}&include_adult=false&sort_bypopularity.desc`;\r\n\r\n        try{\r\n            const res = await fetch(url);\r\n            const data = await res.json();\r\n            setPeliculas(data.results);\r\n            \r\n        }catch(error){\r\n            console.log(error)\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <form className=\"form\" onSubmit={buscarPeliculas}>\r\n                <label htmlFor=\"query\" className=\"label\">Titulo Pelicula</label>\r\n                <input type=\"text\" name=\"query\" className=\"input\" placeholder=\"i.e. Star Wars\"\r\n                value={query} onChange={(e)=> setQuery(e.target.value)}></input>\r\n                <button className=\"button\" type=\"submit\">Buscar</button>\r\n            </form>\r\n            <div className=\"card-list\">\r\n                {peliculas.filter(pelicula => pelicula.poster_path).map(pelicula => (\r\n                    <PeliculaCard pelicula={pelicula} key={pelicula.id} />\r\n                ))}\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\n","import React, {Fragment} from 'react';\nimport SearchMovie from './components/FormBuscador';\nimport './App.css';\n\nfunction App() {\n  return (\n    <Fragment>\n      <div className=\"container\">\n        <h1 className=\"title\">Busca Cine React App</h1>\n        <SearchMovie />\n      </div>\n    </Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}